// test-auctionet-simple.js - Simple test for Auctionet API module
// Run with: node test-auctionet-simple.js

import { AuctionetAPI } from './modules/auctionet-api.js';

async function testAuctionetAPI() {
    console.log('üîç Testing Auctionet API Module...\n');
    
    const api = new AuctionetAPI();
    
    // Test case 1: Lars L√∂fgren (should have good data)
    console.log('üìä Test 1: Lars L√∂fgren (silversmith)');
    try {
        const result1 = await api.analyzeComparableSales(
            'Lars L√∂fgren',
            'POKAL',
            '1797',
            'silver',
            'Pokal i silver fr√•n 1700-talet'
        );
        
        if (result1) {
            console.log('‚úÖ Success!');
            console.log(`üí∞ Price range: ${result1.priceRange.low.toLocaleString()}-${result1.priceRange.high.toLocaleString()} SEK`);
            console.log(`üéØ Confidence: ${Math.round(result1.confidence * 100)}%`);
            console.log(`üìà Total matches: ${result1.totalMatches}`);
            console.log(`üî® Analyzed sales: ${result1.analyzedSales}`);
            
            if (result1.trendAnalysis) {
                console.log(`üìä Trend: ${result1.trendAnalysis.description}`);
            }
        } else {
            console.log('‚ùå No data returned');
        }
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Test case 2: Carl Malmsten (famous Swedish designer)
    console.log('üìä Test 2: Carl Malmsten (furniture designer)');
    try {
        const result2 = await api.analyzeComparableSales(
            'Carl Malmsten',
            'STOL',
            '1950',
            'tr√§',
            'Stol i tr√§ fr√•n 1950-talet'
        );
        
        if (result2) {
            console.log('‚úÖ Success!');
            console.log(`üí∞ Price range: ${result2.priceRange.low.toLocaleString()}-${result2.priceRange.high.toLocaleString()} SEK`);
            console.log(`üéØ Confidence: ${Math.round(result2.confidence * 100)}%`);
            console.log(`üìà Total matches: ${result2.totalMatches}`);
            console.log(`üî® Analyzed sales: ${result2.analyzedSales}`);
        } else {
            console.log('‚ùå No data returned');
        }
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
    }
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Test case 3: Unknown artist (should return null)
    console.log('üìä Test 3: Unknown Artist (should fail gracefully)');
    try {
        const result3 = await api.analyzeComparableSales(
            'Nonexistent Artist XYZ',
            'M√ÖLNING',
            '2000',
            'olja',
            'M√•lning som inte finns'
        );
        
        if (result3) {
            console.log('‚ö†Ô∏è Unexpected success - found data for nonexistent artist');
            console.log(`üí∞ Price range: ${result3.priceRange.low.toLocaleString()}-${result3.priceRange.high.toLocaleString()} SEK`);
        } else {
            console.log('‚úÖ Correctly returned null for unknown artist');
        }
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
    }
    
    console.log('\nüèÅ Testing complete!');
}

// Test live auctions
async function testLiveAuctions() {
    console.log('\nüî¥ Testing LIVE Auction Analysis...\n');
    
    const api = new AuctionetAPI();
    
    // Test case: Orrefors glass (should have active auctions)
    console.log('üî¥ Live Test: Orrefors Glass');
    try {
        const liveResult = await api.analyzeLiveAuctions(
            'Orrefors',
            'VAS',
            '1970',
            'glas',
            'Vas i glas fr√•n Orrefors'
        );
        
        if (liveResult) {
            console.log('‚úÖ Live auction data found!');
            console.log(`üî¥ Active auctions: ${liveResult.analyzedLiveItems}`);
            console.log(`üìä Total matches: ${liveResult.totalMatches}`);
            
            if (liveResult.currentEstimates) {
                const est = liveResult.currentEstimates;
                console.log(`üí∞ Current estimates: ${est.low.toLocaleString()}-${est.high.toLocaleString()} SEK (avg: ${Math.round(est.average).toLocaleString()})`);
            }
            
            if (liveResult.currentBids) {
                const bids = liveResult.currentBids;
                console.log(`üî• Current bids: ${bids.low.toLocaleString()}-${bids.high.toLocaleString()} SEK (avg: ${Math.round(bids.average).toLocaleString()})`);
            }
            
            if (liveResult.marketActivity) {
                const activity = liveResult.marketActivity;
                console.log(`üìä Market activity: ${activity.totalBids} total bids across ${activity.totalItems} items`);
                console.log(`üìà Average bids per item: ${activity.averageBidsPerItem.toFixed(1)}`);
                console.log(`üéØ Reserves met: ${activity.reservesMetPercentage}%`);
            }
            
            console.log(`üí° Market sentiment: ${liveResult.marketSentiment}`);
            
            if (liveResult.liveItems && liveResult.liveItems.length > 0) {
                console.log(`üî¥ Most active live items:`);
                liveResult.liveItems.slice(0, 3).forEach((item, index) => {
                    console.log(`  ${index + 1}. ${item.bidCount} bids: ${item.currentBid.toLocaleString()} SEK`);
                    console.log(`     ${item.title} (${item.timeRemaining} left)`);
                    console.log(`     ${item.house} - Reserve ${item.reserveMet ? '‚úÖ MET' : '‚ùå NOT MET'}`);
                });
            }
        } else {
            console.log('‚ùå No live auction data found');
        }
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
    }
    
    console.log('\nüèÅ Live auction testing complete!');
}

// Run both tests
async function runAllTests() {
    await testAuctionetAPI();
    await testLiveAuctions();
}

// Run the test
runAllTests().catch(console.error); 